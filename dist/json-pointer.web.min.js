!function(n,t){"function"==typeof define&&define.amd?define([],t):n.JSON.pointer=t()}(this,function(){var n,t,e=function(n,t){function e(){this.constructor=n}for(var u in t)r.call(t,u)&&(n[u]=t[u]);return e.prototype=t.prototype,n.prototype=new e,n.__super__=t.prototype,n},r={}.hasOwnProperty;return t=function(n){function t(n){var e;e=t.__super__.constructor.call(this,n),this.message=e.message,this.stack=e.stack,this.name=this.constructor.name}return e(t,n),t}(Error),n=function(){function n(t,e,r){switch(arguments.length){case 3:return n.set(t,e,r);case 2:return n.get(t,e);case 1:return n.smartBind({object:t});default:return null}}return n.JsonPointerError=t,n.smartBind=function(t){var e,u,o,s,a,i,l,c,f,p,g;if(c=t.object,p=t.pointer,u=t.fragment,f=t.options,p=null!=u?u:p,o=void 0!==c,a=null!=p,s=null!=f,"string"==typeof p&&(p=this.parse(p)),l=function(n){var t,e,r,u,o,s,a;return null==n&&(n={}),t={},t.hasOwnProp=null!=(e=n.hasOwnProp)?e:f.hasOwnProp,t.getProp=null!=(r=n.getProp)?r:f.getProp,t.setProp=null!=(u=n.setProp)?u:f.setProp,t.getNotFound=null!=(o=n.getNotFound)?o:f.getNotFound,t.setNotFound=null!=(s=n.setNotFound)?s:f.setNotFound,t.delNotFound=null!=(a=n.delNotFound)?a:f.delNotFound,t},e=void 0,o&&a&&s)e=function(t){switch(arguments.length){case 1:return n.set(c,p,t,f);case 0:return n.get(c,p,f);default:return null}},e.set=function(t,e){return c=n.set(c,p,t,l(e))},e.get=function(t){return n.get(c,p,l(t))},e.has=function(t){return n.has(c,p,l(t))},e.del=function(t){return c=n.del(c,p,l(t))};else if(o&&a)e=function(t){switch(arguments.length){case 1:return n.set(c,p,t);case 0:return n.get(c,p);default:return null}},e.set=function(t,e){return c=n.set(c,p,t,e)},e.get=function(t){return n.get(c,p,t)},e.has=function(t){return n.has(c,p,t)},e.del=function(t){return c=n.del(c,p,t)};else if(o&&s)e=function(t,e){switch(arguments.length){case 2:return n.set(c,t,e,f);case 1:return n.get(c,t,f);default:return null}},e.set=function(t,e,r){return c=n.set(c,t,e,l(r))},e.get=function(t,e){return n.get(c,t,l(e))},e.has=function(t,e){return n.has(c,t,l(e))},e.del=function(t,e){return c=n.del(c,t,l(e))};else if(a&&s)e=function(t,e){switch(arguments.length){case 2:return n.set(t,p,e,f);case 1:return n.get(t,p,f);default:return null}},e.set=function(t,e,r){return n.set(t,p,e,l(r))},e.get=function(t,e){return n.get(t,p,l(e))},e.has=function(t,e){return n.has(t,p,l(e))},e.del=function(t,e){return n.del(t,p,l(e))};else if(s)e=function(t,r,u){switch(arguments.length){case 3:return n.set(t,r,u,f);case 2:return n.get(t,r,f);case 1:return e.smartBind({object:t});default:return null}},e.set=function(t,e,r,u){return n.set(t,e,r,l(u))},e.get=function(t,e,r){return n.get(t,e,l(r))},e.has=function(t,e,r){return n.has(t,e,l(r))},e.del=function(t,e,r){return n.del(t,e,l(r))};else if(o)e=function(t,e){switch(arguments.length){case 2:return n.set(c,t,e);case 1:return n.get(c,t);default:return null}},e.set=function(t,e,r){return c=n.set(c,t,e,r)},e.get=function(t,e){return n.get(c,t,e)},e.has=function(t,e){return n.has(c,t,e)},e.del=function(t,e){return c=n.del(c,t,e)};else{if(!a)return this;e=function(t,e){switch(arguments.length){case 2:return n.set(t,p,e);case 1:return n.get(t,p);default:return null}},e.set=function(t,e,r){return n.set(t,p,e,r)},e.get=function(t,e){return n.get(t,p,e)},e.has=function(t,e){return n.has(t,p,e)},e.del=function(t,e){return n.del(t,p,e)}}e.smartBind=function(t){var e;return e={},{}.hasOwnProperty.call(t,"object")?e.object=t.object:o&&(e.object=c),{}.hasOwnProperty.call(t,"pointer")?e.pointer=t.pointer:a&&(e.pointer=p),{}.hasOwnProperty.call(t,"options")?e.options=l(t.options):o&&(e.options=f),n.smartBind(e)},a&&(e.pointer=function(t){return 0===arguments.length?n.compilePointer(p):p=n.parsePointer(t)},e.fragment=function(t){return 0===arguments.length?n.compileFragment(p):p=n.parseFragment(t)}),o&&(e.object=function(n){return 0===arguments.length?c:c=n}),s&&(e.options=function(n){return 0===arguments.length?f:f=n});for(i in n)r.call(n,i)&&(g=n[i],{}.hasOwnProperty.call(e,i)||(e[i]=g));return e},n.escape=function(n){return n.replace(/~/g,"~0").replace(/\//g,"~1")},n.escapeFragment=function(t){return encodeURIComponent(n.escape(t))},n.unescape=function(n){return n.replace(/~1/g,"/").replace(/~0/g,"~")},n.unescapeFragment=function(t){return n.unescape(decodeURIComponent(t))},n.isPointer=function(n){switch(n.charAt(0)){case"":return!0;case"/":return!0;default:return!1}},n.isFragment=function(n){switch(n.substring(0,2)){case"#":return!0;case"#/":return!0;default:return!1}},n.parse=function(e){switch(e.charAt(0)){case"":return[];case"/":return e.substring(1).split("/").map(n.unescape);case"#":switch(e.charAt(1)){case"":return[];case"/":return e.substring(2).split("/").map(n.unescapeFragment);default:throw new t("Invalid JSON fragment pointer: "+e)}break;default:throw new t("Invalid JSON pointer: "+e)}},n.parsePointer=function(e){switch(e.charAt(0)){case"":return[];case"/":return e.substring(1).split("/").map(n.unescape);default:throw new t("Invalid JSON pointer: "+e)}},n.parseFragment=function(e){switch(e.substring(0,2)){case"#":return[];case"#/":return e.substring(2).split("/").map(n.unescapeFragment);default:throw new t("Invalid JSON fragment pointer: "+e)}},n.compile=function(t){return t.map(function(t){return"/"+n.escape(t)}).join("")},n.compilePointer=function(t){return t.map(function(t){return"/"+n.escape(t)}).join("")},n.compileFragment=function(t){return"#"+t.map(function(t){return"/"+n.escapeFragment(t)}).join("")},n.hasJsonProp=function(n,t){return Array.isArray(n)?"number"==typeof t&&t<n.length:"object"==typeof n?{}.hasOwnProperty.call(n,t):!1},n.hasOwnProp=function(n,t){return{}.hasOwnProperty.call(n,t)},n.hasProp=function(n,t){return t in n},n.getProp=function(n,t){return n[t]},n.setProp=function(n,t,e){return n[t]=e},n.getNotFound=function(n,t,e,r,u){},n.setNotFound=function(n,t,e,r,u){return r[u+1].match(/^(?:0|[1-9]\d*|-)$/)?n[t]=[]:n[t]={}},n.delNotFound=function(n,t,e,r,u){},n.errorNotFound=function(e,r,u,o,s){throw new t("Unable to find json path: "+n.compile(o.slice(0,s+1)))},n.set=function(t,e,r,u){var o,s,a,i,l,c,f,p,g,h,d,m;if("string"==typeof e&&(e=n.parse(e)),0===e.length)return r;for(s=null!=(l=null!=u?u.hasProp:void 0)?l:n.hasJsonProp,o=null!=(c=null!=u?u.getProp:void 0)?c:n.getProp,m=null!=(f=null!=u?u.setProp:void 0)?f:n.setProp,d=null!=(p=null!=u?u.setNotFound:void 0)?p:n.setNotFound,g=t,a=0,i=e.length;a!==i;){if(h=e[a],++a,"-"===h&&Array.isArray(t)?h=t.length:h.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(t)&&(h=parseInt(h,10)),a===i){m(t,h,r);break}t=s(t,h)?o(t,h):d(t,h,g,e,a-1)}return g},n.get=function(t,e,r){var u,o,s,a,i,l,c,f,p,g;for("string"==typeof e&&(e=n.parse(e)),s=null!=(l=null!=r?r.hasProp:void 0)?l:n.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:n.getProp,u=null!=(f=null!=r?r.getNotFound:void 0)?f:n.getNotFound,p=t,a=0,i=e.length;a!==i;){if(g=e[a],++a,"-"===g&&Array.isArray(t)?g=t.length:g.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(t)&&(g=parseInt(g,10)),!s(t,g))return u(t,g,p,e,a-1);t=o(t,g)}return t},n.del=function(t,e,r){var u,o,s,a,i,l,c,f,p,g;if("string"==typeof e&&(e=n.parse(e)),0!==e.length){for(s=null!=(l=null!=r?r.hasProp:void 0)?l:n.hasJsonProp,o=null!=(c=null!=r?r.getProp:void 0)?c:n.getProp,u=null!=(f=null!=r?r.delNotFound:void 0)?f:n.delNotFound,p=t,a=0,i=e.length;a!==i;){if(g=e[a],++a,"-"===g&&Array.isArray(t)?g=t.length:g.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(t)&&(g=parseInt(g,10)),!s(t,g)){u(t,g,p,e,a-1);break}if(a===i){delete t[g];break}t=o(t,g)}return p}},n.has=function(t,e,r){var u,o,s,a,i,l,c;for("string"==typeof e&&(e=n.parse(e)),o=null!=(i=null!=r?r.hasProp:void 0)?i:n.hasJsonProp,u=null!=(l=null!=r?r.getProp:void 0)?l:n.getProp,s=0,a=e.length;s!==a;){if(c=e[s],++s,"-"===c&&Array.isArray(t)?c=t.length:c.match(/^(?:0|[1-9]\d*)$/)&&Array.isArray(t)&&(c=parseInt(c,10)),!o(t,c))return!1;t=u(t,c)}return!0},n}()});
//# sourceMappingURL=data:application/json;base64,
